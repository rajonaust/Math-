/* Catalan Number */
/* Time Complexity O(N) */
#include <iostream>
using namespace std;
#define mx 1000
long long fact[2*mx] , mod = 1000000007 ;
long long big_mod(long long a,long long b,long long MOD)
{
    if(b==0) return 1 ;
    if(b==1) return a ;
    if(b%2) return (big_mod(a,b-1,MOD)*a)%MOD;
    else
    {
        long long x = big_mod(a,b/2,MOD);
        return (x*x)%MOD;
    }
}
long long modulus_Inverse(long long A,long long MOD)
{
    return big_mod(A,MOD-2,MOD);
}
long long catalan(int n)
{
    fact[0] = 1 ;
    for(long long i=1;i<=2*n;i++) fact[i] = (fact[i-1]*i)%mod;

    long long ans = fact[2*n] ;
    ans = (ans*modulus_Inverse(fact[n+1],mod))%mod;
    ans = (ans*modulus_Inverse(fact[n],mod))%mod;
    return ans ;
}
int main()
{
    int n ;
    cin >> n ;
    cout << catalan(n) << endl ;
    return 0;
}
/*
1
/*
1
*/
/*
5
*/
/*
42
*/
/*
9
*/
/*
4862
*/
/*
3
*/
/*
5
*/
/*
30
*/
/*
475387402
*/
