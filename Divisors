// Given a number , you have to find the divisors of the number .
// Also find the number of divisors and summation of those divisors of the number .
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
#define mx 1000000
typedef long long ll;
vector <ll> prime , divisor ;
char status[mx+10];
ll power (ll number,ll p)
{
    ll ans = 1 ;
    for(ll i=1;i<=p;i++)
    {
        ans*=number;
    }
    return ans;
}
void sieve()
{
    prime.push_back(2);
    for(ll i=3;i<=mx;i+=2)
    {
        if(status[i]==NULL)
        {
            prime.push_back(i);
            for(ll j=i*i;j<=mx;j+=i*2) status[j]='1';
        }
    }
}
void finding_Divisors(ll number)
{
    for(ll i=1;i*i<=number;i++)
    {
        if(number%i==0) divisor.push_back(i);
        if((number%i==0)&&(number/i)!=i) divisor.push_back(number/i);
    }
    sort(divisor.begin(),divisor.end());
}
void number_Of_Divisors(ll number,ll &total,ll &even,ll &odd)
{
    total = 1 ; odd = 1 ;
    for(ll i = 0 ;i<prime.size();i++)
    {
        if(prime[i]*prime[i]>number) break;
        if(number%prime[i]==0)
        {
            ll cnt = 0 ;
            while(number%prime[i]==0)
            {
                number/=prime[i];
                cnt++;
            }
            total*=(cnt+1);
            if(prime[i]!=2) odd*=(cnt+1);
        }
    }
    if(number!=1) total*=2 , odd*=2 ;
    even=total-odd;
}
ll summation_Of_Divisors(ll number)
{
    ll ans = 1 ;
    for(ll i = 0 ;i<prime.size();i++)
    {
        if(prime[i]*prime[i]>number) break;
        if(number%prime[i]==0)
        {
            ll cnt = 0 ;
            while(number%prime[i]==0)
            {
                number/=prime[i];
                cnt++;
            }
            ans*=(power(prime[i],cnt+1)-1)/(prime[i]-1);
        }
    }
    if(number!=1) ans*=(number+1); // Avoiding overflow .
    return ans;
}
int main()
{
    sieve();
    int number ;
    cin >> number ;

    finding_Divisors(number);
    cout << "The divisors of " << number << " are = " ;
    for(int i=0;i<divisor.size();i++) cout << divisor[i] << " " ;
    cout << "\n";

    ll total , odd , even ;
    number_Of_Divisors(number,total,even,odd);

    cout << "Number of divisors = " << total << "\n" ;

    cout << "Number of Even divisors = " << even << "\n" ;

    cout << "Number of Odd divisors = " << odd << "\n" ;

    cout << "Summation of divisors = " << summation_Of_Divisors(number) << "\n" ;

    return 0;
}

/*
575
*/
/*
The divisors of 575 are = 1 5 23 25 115 575
Number of divisors = 6
Number of Even divisors = 0
Number of Odd divisors = 6
Summation of divisors = 744
*/
/*
12
*/
/*
The divisors of 12 are = 1 2 3 4 6 12
Number of divisors = 6
Number of Even divisors = 4
Number of Odd divisors = 2
Summation of divisors = 28
*/
