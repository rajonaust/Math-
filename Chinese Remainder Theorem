// Chinese Remainder Theorem
// Given a set of numbers of p1 , p2 , ... , pN ( all are relatively co-prime with each other ) and another set of remainder r1 , r2 , ... , rN .
// Find a number X such that r1 = X % p1 , r2 = X % p2 , ... , rN = X % pN .

#include <iostream>
using namespace std;
typedef long long  ll ;

struct
{
    ll p , r ;

}arr[15];

/* Calculate ( a*b ) %c */
ll mulmod(ll a,ll b,ll c)
{
    ll x = 0 , y = a%c ;
    while(b>0)
    {
        if(b%2) x = (x+y)%c ;
        y=(y*2)%c;
        b/=2;
    }
    return x%c ;
}

/* Calculate ( a^b ) %c */
ll modulo(ll a,ll b,ll c)
{
    ll x = 1 , y = a%c ;
    while( b > 0 )
    {
        if(b%2) x = mulmod(x,y,c) ;
        y=mulmod(y,y,c);
        b/=2;
    }
    return x%c ;
}

ll modulus_Inverse(ll A,ll MOD)
{
    return modulo(A,MOD-2,MOD);
}

int main()
{
    int n ; // Number of elements in each set .
    cin >> n ;

    ll ans = 0 , m = 1 ;
    for(int i=1;i<=n;i++) cin >> arr[i].p >> arr[i].r , m*=arr[i].p ;

    for(int i=1;i<=n;i++)
    {
        ll mi = m / arr[i].p ;

        ll x = modulus_Inverse(mi,arr[i].p);
        x = mulmod(mi,x,m);
        x = mulmod(x,arr[i].r,m) ;

        ans=(ans+x)%m;
    }

    cout << ans%m << endl ; // Find infinite numbers of answer by ans+i*m / ans-i*m ( where i = 1 , 2 , .... ) .

    return 0;
}

/*
3
5 4
7 6
11 3
*/
/*
69
*/

/*
4
2 1
3 2
5 3
7 1
*/
/*
113
*/

/*
10
13 2
17 7
37 35
29 9
31 13
23 2
11 7
19 11
5 2
2 1
*/
/*
236330265277
*/

/*
12
13 7
29 5
19 11
11 7
7 2
31 8
2 1
5 1
3 1
17 1
23 2
37 16
*/
/*
3350791439431
*/
